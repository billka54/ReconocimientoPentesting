import nmap
import nmap3
import subprocess
import pyfiglet
import re
from tabulate import tabulate


def main():
    
    title = pyfiglet.figlet_format("BILLKA - TOOL", font="slant")
    print (title)
    print("-"*75)
    print("\n [+] Herramienta creada para la automatización en tareas de ciberseguridad")
    print("\n [+] Esta herramienta automatiza la fase de reconocimiento en un pentest")
    print("\n [!] Se recomienda ejecutar la terminal con permisos de administrador")
    print("\n [!] Esta herramienta ha sido programada para ser ejecutada en Windows")
    print("-"*75)
    print("\n")
    datos = [
        ["[1] -->", "LANZAR UN PING"],
        ["[2] -->", "ESCANEAR PUERTOS ABIERTOS"],
        ["[3] -->", "DETECTAR SISTEMA OPERATIVO"],
        ["[4] -->", "DETECTAR VERSIONES Y SERVICIOS"]
    ]
    encabezados = ["OPCIÓN", "DESCRIPCIÓN"]
    tabla = tabulate(datos,headers=encabezados, tablefmt="ascii")
    print(tabla)
    print("\n [+] Para salir del programa: Q || q")
    
    while True:
        opcion = input("\n [+] Escoge una opción: ")
    
        if opcion == "1":
            ping()
        elif opcion == "2":
            PortScanner()
        elif opcion == "3":
            obtener_ttl()
        elif opcion == "4":
            VersionesServicios()
        elif opcion == "q" or opcion == "Q":
            print("Hasta pronto!!")
            break
        else:
            print("Opción incorrecta!!Adiós!")
            break


def ping():
    ip_ping = input("Introduce una IP para lanzar un ping: ")
    try:
        subprocess.run(["ping", "-n", "4", ip_ping], check=True, text=True)
        if ip_ping:
            print("El ping a la IP %s fue exitoso" %ip_ping)
        else:
            print("El Ping a la IP %s ha fallado" %ip_ping)
        return True
    except subprocess.CalledProcessError:
        return False


def PortScanner():
    ip = input("Introduce la IP destino: ")
    nmap =nmap3.NmapScanTechniques()
    results = nmap.scan_top_ports(ip, args="--min-rate 5000 --open -vvv -T5 -Pn -p- -n")
    
    for puerto in results[ip]['ports']:
        portid = puerto['portid']
        state = puerto['state']
        tipo = puerto ['reason']
        name = puerto ['service']['name']
        print(f"Port ID: {portid}\nState: {state}\nScan Type: {tipo}\nPort Name: {name}\n------------")


def obtener_ttl():
    ip_destino = input("Introduce la dirección IP de destino: ")
    
    try:
        output = subprocess.run(["ping", "-c", "1", ip_destino], check=True, capture_output=True, text=True)
        output = output.stdout

        # Intentar encontrar el TTL utilizando diferentes expresiones regulares
        ttl_match = re.search(r"TTL=(\d+)", output)
        if ttl_match:
            ttl = int(ttl_match.group(1))
            if ttl <=64:
                print("Sistema operativo: LINUX")
            elif ttl <=128:
                print("Sistema Operativo: WINDOWS")
            elif ttl <=255:
                print("Sistema Operativo: MacOS / SOLARIS")
        else:
            print("No se pudo obtener el TTL")
    except subprocess.CalledProcessError as e:
        print("Error al realizar el ping:", str(e))


def VersionesServicios():
    
    ip = input("Introduce la IP destino: ")
    nmap = nmap3.NmapScanTechniques()
    result = nmap.scan_top_ports(ip, args="--min-rate 5000 -sC -sV")


    for port in result[ip]['ports']:
        portid = port['portid']
        state = port['state']
        name = port['service']['name']
        print(f"Port ID: {portid}\nState: {state}\nName: {name}\n----------")


if __name__=="__main__":
    main()